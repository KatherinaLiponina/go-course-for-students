// Code generated by MockGen. DO NOT EDIT.
// Source: homework10/internal/app (interfaces: AdRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	ads "homework10/internal/ads"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdRepository is a mock of AdRepository interface.
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository.
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance.
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// AppendAd mocks base method.
func (m *MockAdRepository) AppendAd(arg0, arg1 string, arg2 int64) *ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAd", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ads.Ad)
	return ret0
}

// AppendAd indicates an expected call of AppendAd.
func (mr *MockAdRepositoryMockRecorder) AppendAd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAd", reflect.TypeOf((*MockAdRepository)(nil).AppendAd), arg0, arg1, arg2)
}

// ChangeAdStatus mocks base method.
func (m *MockAdRepository) ChangeAdStatus(arg0 int64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeAdStatus", arg0, arg1)
}

// ChangeAdStatus indicates an expected call of ChangeAdStatus.
func (mr *MockAdRepositoryMockRecorder) ChangeAdStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAdStatus", reflect.TypeOf((*MockAdRepository)(nil).ChangeAdStatus), arg0, arg1)
}

// DeleteAd mocks base method.
func (m *MockAdRepository) DeleteAd(arg0 int64) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAd", arg0)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAd indicates an expected call of DeleteAd.
func (mr *MockAdRepositoryMockRecorder) DeleteAd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAd", reflect.TypeOf((*MockAdRepository)(nil).DeleteAd), arg0)
}

// GetAdByID mocks base method.
func (m *MockAdRepository) GetAdByID(arg0 int64) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdByID", arg0)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdByID indicates an expected call of GetAdByID.
func (mr *MockAdRepositoryMockRecorder) GetAdByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdByID", reflect.TypeOf((*MockAdRepository)(nil).GetAdByID), arg0)
}

// Select mocks base method.
func (m *MockAdRepository) Select(arg0 func(ads.Ad) bool) []ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].([]ads.Ad)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockAdRepositoryMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAdRepository)(nil).Select), arg0)
}

// UpdateAd mocks base method.
func (m *MockAdRepository) UpdateAd(arg0 int64, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAd", arg0, arg1, arg2)
}

// UpdateAd indicates an expected call of UpdateAd.
func (mr *MockAdRepositoryMockRecorder) UpdateAd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAd", reflect.TypeOf((*MockAdRepository)(nil).UpdateAd), arg0, arg1, arg2)
}
