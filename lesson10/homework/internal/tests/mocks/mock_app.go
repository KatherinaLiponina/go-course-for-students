// Code generated by MockGen. DO NOT EDIT.
// Source: homework10/internal/app (interfaces: App)

// Package mocks is a generated GoMock package.
package mocks

import (
	ads "homework10/internal/ads"
	users "homework10/internal/users"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// ChangeAdStatus mocks base method.
func (m *MockApp) ChangeAdStatus(arg0, arg1 int64, arg2 bool) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAdStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAdStatus indicates an expected call of ChangeAdStatus.
func (mr *MockAppMockRecorder) ChangeAdStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAdStatus", reflect.TypeOf((*MockApp)(nil).ChangeAdStatus), arg0, arg1, arg2)
}

// CreateAd mocks base method.
func (m *MockApp) CreateAd(arg0, arg1 string, arg2 int64) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockAppMockRecorder) CreateAd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockApp)(nil).CreateAd), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockApp) CreateUser(arg0, arg1 string) *users.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockApp)(nil).CreateUser), arg0, arg1)
}

// DeleteAd mocks base method.
func (m *MockApp) DeleteAd(arg0, arg1 int64) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAd", arg0, arg1)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAd indicates an expected call of DeleteAd.
func (mr *MockAppMockRecorder) DeleteAd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAd", reflect.TypeOf((*MockApp)(nil).DeleteAd), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockApp) DeleteUser(arg0 int64) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockApp)(nil).DeleteUser), arg0)
}

// FindByTitle mocks base method.
func (m *MockApp) FindByTitle(arg0 string) []ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTitle", arg0)
	ret0, _ := ret[0].([]ads.Ad)
	return ret0
}

// FindByTitle indicates an expected call of FindByTitle.
func (mr *MockAppMockRecorder) FindByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTitle", reflect.TypeOf((*MockApp)(nil).FindByTitle), arg0)
}

// GetAdByID mocks base method.
func (m *MockApp) GetAdByID(arg0 int64) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdByID", arg0)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdByID indicates an expected call of GetAdByID.
func (mr *MockAppMockRecorder) GetAdByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdByID", reflect.TypeOf((*MockApp)(nil).GetAdByID), arg0)
}

// GetUserByID mocks base method.
func (m *MockApp) GetUserByID(arg0 int64) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAppMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockApp)(nil).GetUserByID), arg0)
}

// Select mocks base method.
func (m *MockApp) Select() []ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select")
	ret0, _ := ret[0].([]ads.Ad)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockAppMockRecorder) Select() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockApp)(nil).Select))
}

// SelectAll mocks base method.
func (m *MockApp) SelectAll() []ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]ads.Ad)
	return ret0
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockAppMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockApp)(nil).SelectAll))
}

// SelectByAuthor mocks base method.
func (m *MockApp) SelectByAuthor(arg0 int64) ([]ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByAuthor", arg0)
	ret0, _ := ret[0].([]ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByAuthor indicates an expected call of SelectByAuthor.
func (mr *MockAppMockRecorder) SelectByAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByAuthor", reflect.TypeOf((*MockApp)(nil).SelectByAuthor), arg0)
}

// SelectByCreation mocks base method.
func (m *MockApp) SelectByCreation(arg0 time.Time) []ads.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByCreation", arg0)
	ret0, _ := ret[0].([]ads.Ad)
	return ret0
}

// SelectByCreation indicates an expected call of SelectByCreation.
func (mr *MockAppMockRecorder) SelectByCreation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByCreation", reflect.TypeOf((*MockApp)(nil).SelectByCreation), arg0)
}

// UpdateAd mocks base method.
func (m *MockApp) UpdateAd(arg0, arg1 int64, arg2, arg3 string) (*ads.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAd", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ads.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAd indicates an expected call of UpdateAd.
func (mr *MockAppMockRecorder) UpdateAd(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAd", reflect.TypeOf((*MockApp)(nil).UpdateAd), arg0, arg1, arg2, arg3)
}

// UpdateUser mocks base method.
func (m *MockApp) UpdateUser(arg0 int64, arg1, arg2 string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockApp)(nil).UpdateUser), arg0, arg1, arg2)
}
